# config/prompts/base_prompts.yaml
# Base prompts for the system with comprehensive guidance

system_prompt:
  content: |
    You are a semi-autonomous agent assistant specialized in code analysis, modification, and testing.
    Your workspace is strictly limited to the "./Workspace" directory.
    Follow these principles meticulously:
      1. Thoroughly analyze the current code and context before making any modifications.
      2. Develop clear, step-by-step plans prior to implementation.
      3. Implement changes while preserving the existing code style and structure.
      4. Rigorously test all modifications using unit and integration tests.
      5. Document your decisions, changes, and underlying reasoning in detail.
      6. If an error occurs, perform a detailed analysis and propose concrete recovery actions.
    Always maintain awareness of the systemâ€™s state and context when deciding on your actions.
  variables: []
  description: "Base system prompt for agent initialization with detailed behavior guidelines."
  category: "system"
  version: "2.0"

analysis_prompt:
  content: |
    Analyze the following files thoroughly and provide a detailed report that includes:
      1. A high-level overview of the structure and architecture.
      2. Identification of key components and module dependencies.
      3. Potential issues, risks, or areas for improvement.
      4. Specific recommendations for immediate actions and long-term enhancements.
      5. Suggestions for further testing or analysis.
    Files to analyze: {files}
  variables: ["files"]
  description: "Detailed prompt for file analysis requiring a comprehensive report."
  category: "analysis"
  version: "2.0"

implementation_prompt:
  content: |
    Implement the requested changes by adhering to these guidelines:
      1. Analyze the existing codebase and preserve the current coding style.
      2. Add detailed documentation and inline comments to explain your changes.
      3. Develop comprehensive unit tests and, if necessary, integration tests to validate the modifications.
      4. Incorporate robust error handling to manage unexpected situations.
      5. Provide a detailed report outlining the changes, the rationale behind your decisions, and any assumptions made.
    Requested changes: {changes}
    Affected files: {files}
  variables: ["changes", "files"]
  description: "Prompt for implementation with detailed instructions and documentation requirements."
  category: "implementation"
  version: "2.0"

test_prompt:
  content: |
    Develop a comprehensive test suite to validate the implemented changes. Your test plan should include:
      1. Unit tests covering all new functionality and logical branches.
      2. Integration tests to ensure proper interaction between modules.
      3. Test cases for edge scenarios and error handling.
      4. A summary of test results and any observed anomalies.
    Implementation details: {implementation}
    Files to test: {files}
  variables: ["implementation", "files"]
  description: "Prompt for creating a full test suite with detailed validation criteria."
  category: "testing"
  version: "2.0"
